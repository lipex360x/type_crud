{
  "Template Snippets": {
    "prefix": "snippetTemplate",
    "body": [
      "\"${1:SNIPPET_TITLE}\": {",
      "  \"prefix\": \"${2:PREFIX}\",",
      "  \"body\": [",
      "    \"${3:BODY}\"",
      "  ]",
      "},",
      "",
    ]
  },


  "Migration FK Column": {
    "prefix": "migrationForeignKey",
    "body": [
    "import { MigrationInterface, QueryRunner, TableColumn, TableForeignKey } from 'typeorm'",
    "",
    "export default class ${1:MigrationName}",
    "  implements MigrationInterface {",
    "  public async up(queryRunner: QueryRunner): Promise<void> {",
    "",
    "    await queryRunner.addColumn(",
    "      '${2:DATABASE_NAME}',",
    "      new TableColumn({",
    "        name: '${3:COLUMN_NAME}',",
    "        type: 'uuid',",
    "        isNullable: true,",
    "      })",
    "    );",
    "",
    "    await queryRunner.createForeignKey(",
    "      '${2:DATABASE_NAME}',",
    "      new TableForeignKey({",
    "        name: '${2:DATABASE_NAME}_To_${5:REFERENCE_TABLE}',",
    "        columnNames: ['${3:COLUMN_NAME}'],",
    "",
    "        referencedTableName: '${5:REFERENCE_TABLE}',",
    "        referencedColumnNames: ['${3:COLUMN_NAME}'],",
    "",
    "        onDelete: '${6|CASCADE,SET NULL|}',",
    "        onUpdate: '${7|CASCADE,SET NULL|}'",
    "      })",
    "    )",
    "  }",
    "",
    "  public async down(queryRunner: QueryRunner): Promise<void> {",
    "    await queryRunner.dropForeignKey('${2:DATABASE_NAME}', '${2:DATABASE_NAME}_To_${5:REFERENCE_TABLE}');",
    "    await queryRunner.dropColumn('${2:DATABASE_NAME}', '${3:COLUMN_NAME}');",
    "  }",
    "}",
    ]
  },

  "Entity Template": {
    "prefix": "entityTemplate",
    "body": [
    "import { v4 as uuid } from 'uuid'",
    "import {",
    "  Entity,",
    "  Column,",
    "  PrimaryColumn,",
    "  CreateDateColumn,",
    "  UpdateDateColumn",
    "} from 'typeorm'",
    "",
    "@Entity('${TM_FILENAME_BASE/(.*)/${1:/downcase}/}s')",
    "export default class $TM_FILENAME_BASE {",
    "  @PrimaryColumn('uuid')",
    "  id: string;",
    "",
    "  @Column()",
    "  name: string;",
    "",
    "  @CreateDateColumn()",
    "  created_at: Date;",
    "",
    "  @UpdateDateColumn()",
    "  updated_at: Date;",
    "",
    "  @DeleteDateColumn()",
    "  deleted_at: Date;",
    "",
    "  constructor() {",
    "    if (!this.id) this.id = uuid()",
    "  }",
    "}",
    "",
    ]
  },
  
  "Many to One Relation": {
    "prefix": "manyToOneTemplate",
    "body": [
      "@ManyToOne(() => ${1:ONE_ENTITY}, ${2:nickname} => ${2:nickname}.${TM_FILENAME_BASE/(.*)/${1:/downcase}/})",
      "@JoinColumn({ name: '${3:Primary_Column_ONE_ENTITY}_id' })",
      "${2:nickname}: ${1:ONE_ENTITY}",
      "",
      "@Column('uuid')",
      "${3:Primary_Column_ONE_ENTITY}_id: string;",
      "",
    ]
  },

  "One to Many Relation": {
    "prefix": "oneToManyTemplate",
    "body": [
      "@OneToMany(() => ${1:MANY_ENTITY}, ${2:nickname} => ${2:nickname}.${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, {})",
      "${2:nickname}: ${1:MANY_ENTITY}[]",
      "",
    ]
  },

  "Interface Template": {
    "prefix": "interfaceTemplate",
    "body": [
      "// import ENTITY from '@modules/'",
      "",
      "export interface CreateProps {",
      "  ${1:PROP}: ${2:TYPE}",
      "}",
      "",
      "export default interface $TM_FILENAME_BASE {",
      "  create(data: CreateProps): Promise<ENTITY>",
      "}",
      "",
    ]
  },

  "Plop Prompt Template": {
    "prefix": "promptTemplate",
    "body": [
      "{",
      "  type: 'input',",
      "  name: '${1:NAME}',",
      "  message: '${2:Text}',",
      "  default: 'Default_Value',",
      "  validate: (value) => {",
      "    if (!value) {",
      "      return '${1:NAME} is required'",
      "    }",
      "    return true",
      "  }",
      "}"
    ]
  },
}
  