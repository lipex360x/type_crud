{
  "Plop File": {
      "prefix": "plopTemplate",
      "body": [
        "module.exports = {",
        "  description: '${1:Description}',",
        "  prompts: [",
        "    {",
        "      type: 'input',",
        "      name: 'name',",
        "      message: '${2:Text}'",
        "    }",
        "  ],",
        "  actions: [",
        "    {",
        "      type: 'add',",
        "      path: '${3:path_to_create_file}',",
        "      templateFile: './${TM_DIRECTORY/^.+\\/(.*)$/$1/}/templates/XXXXXXXXXX'",
        "    }",
        "  ]",
        "}",
        ""
      ]
    },
  
    "Swagger Definitions": {
      "prefix": "swaggerDef",
      "body": [
        "\"${tagName}\": {",
          "  \"${Service}\": {",
          "    \"application/json\": {",
          "      \"schema\": {",
          "        \"type\": \"object\",",
          "        \"properties\": {",
          "          \"name\": {",
          "            \"type\": \"string\"",
          "          },",
          "          \"description\": {",
          "            \"type\": \"string\"",
          "          }",
          "        },",
          "        \"example\": {",
          "          \"name\": \"Name Sample\",",
          "          \"description\": \"Description Sample\"",
          "        }",
          "      }",
          "    }",
          "  }",
          "}",
      ]
    },
    
    
    "Migration Create Table Template": {
      "prefix": "migrationTable",
      "body": [
        "import { MigrationInterface, QueryRunner, Table } from 'typeorm'",
        "",
        "export default class ${1:MigrationName} implements MigrationInterface {",
        "  public async up (queryRunner: QueryRunner): Promise<void> {",
        "    await queryRunner.createTable(",
        "      new Table({",
        "        name: '${2:TABLE_NAME}',",
        "        columns: [",
        "          {",
        "            name: '${3:TABLE_SINGLE_NAME}_id',",
        "            type: 'uuid',",
        "            isPrimary: true",
        "          },",
        "",
        "          {",
        "            name: '${4:COLUMN_NAME}',",
        "            type: '${5|varchar,text,uuid,integer,decimal,boolean|}'",
        "          },",
        "",
        "          {",
        "            name: 'created_at',",
        "            type: 'timestamp with time zone',",
        "            default: 'now()'",
        "          },",
        "",
        "          {",
        "            name: 'updated_at',",
        "            type: 'timestamp with time zone',",
        "            default: 'now()'",
        "          },",
        "",
        "          {",
        "            name: 'deleted_at',",
        "            type: 'timestamp with time zone',",
        "            isNullable: true,",
        "            default: null",
        "          }",
        "        ]",
        "      })",
        "    )",
        "  }",
        "",
        "  public async down (queryRunner: QueryRunner): Promise<void> {",
        "    await queryRunner.dropTable('${2:TABLE_NAME}')",
        "  }",
        "}",
        "",
      ]
    },
  
    "Migration Column": {
      "prefix": "migrationColumn",
      "body": [
        "import { MigrationInterface, QueryRunner, TableColumn } from 'typeorm';",
        "",
        "export default class ${1:MigrationName}",
        "  implements MigrationInterface {",
        "  public async up(queryRunner: QueryRunner): Promise<void> {",
        "    await queryRunner.addColumn(",
        "      '${2:Table Name}',",
        "      new TableColumn({",
        "        name: '${3:Column Name}',",
        "        type: '${4|varchar,integer,boolean,decimal|}',",
        "        isNullable: true,",
        "      }),",
        "    );",
        "  }",
        "",
        "  public async down(queryRunner: QueryRunner): Promise<void> {",
        "    await queryRunner.dropColumn('${2:Table Name}', '${3:Column Name}');",
        "  }",
        "}",
      ]
    },
  
    "Migration FK Column": {
      "prefix": "migrationForeignKey",
      "body": [
      "import { MigrationInterface, QueryRunner, TableColumn, TableForeignKey } from 'typeorm'",
      "",
      "export default class ${1:MigrationName}",
      "  implements MigrationInterface {",
      "  public async up(queryRunner: QueryRunner): Promise<void> {",
      "",
      "    await queryRunner.addColumn(",
      "      '${2:DATABASE_NAME}',",
      "      new TableColumn({",
      "        name: '${3:COLUMN_NAME}',",
      "        type: 'uuid',",
      "        isNullable: true,",
      "      })",
      "    );",
      "",
      "    await queryRunner.createForeignKey(",
      "      '${2:DATABASE_NAME}',",
      "      new TableForeignKey({",
      "        name: '${2:DATABASE_NAME}_To_${5:REFERENCE_TABLE}',",
      "        columnNames: ['${3:COLUMN_NAME}'],",
      "",
      "        referencedTableName: '${5:REFERENCE_TABLE}',",
      "        referencedColumnNames: ['${3:COLUMN_NAME}'],",
      "",
      "        onDelete: '${6|CASCADE,SET NULL|}',",
      "        onUpdate: '${7|CASCADE,SET NULL|}'",
      "      })",
      "    )",
      "  }",
      "",
      "  public async down(queryRunner: QueryRunner): Promise<void> {",
      "    await queryRunner.dropForeignKey('${2:DATABASE_NAME}', '${2:DATABASE_NAME}_To_${5:REFERENCE_TABLE}');",
      "    await queryRunner.dropColumn('${2:DATABASE_NAME}', '${3:COLUMN_NAME}');",
      "  }",
      "}",
      ]
    },
  
    
    "Factory TypeORM Template": {
      "prefix": "factoryTemplate",
      "body": [
        "import Faker from 'faker'",
        "import { define } from 'typeorm-seeding'",
        "import ENTITYXXXXX from '@modules/'",
        "",
        "define(ENTITY, (faker: typeof Faker, context: { roles: string[] }) => {",
        "  const dateCreate = new Date()",
        "  const ENTITYXXXXX = new ENTITY()",
        "",
        "   Object.assign(ENTITY, {",
        "    _id: faker.datatype.uuid(),",
        "    property: faker.lorem.word,",
        "    created_at: dateCreate,",
        "    updated_at: dateCreate,",
        "  })",
        "",
        "  return ENTITYXXXXX",
        "})",
      ]
    },
  
  
    "Seed TypeORM Template": {
      "prefix": "seedTemplate",
      "body": [
        "import { v4 as uuid } from 'uuid'",
        "import { Factory, Seeder } from 'typeorm-seeding'",
        "import { Connection } from 'typeorm'",
        "import ENTITY from '@modules/'",
        "",
        "export default class $TM_FILENAME_BASE implements Seeder {",
        "  public async run (factory: Factory, connection: Connection): Promise<any> {",
        "    await connection",
        "      .createQueryBuilder()",
        "      .insert()",
        "      .into(ENTITY)",
        "      .values([",
        "        { _id: uuid(), property: 'value' },",
        "      ])",
        "      .execute()",
        "  }",
        "}",
      ]
    },
    
    "Entity Template": {
      "prefix": "entityTemplate",
      "body": [
      "import { v4 as uuid } from 'uuid'",
      "import {",
      "  Entity,",
      "  Column,",
      "  PrimaryColumn,",
      "  CreateDateColumn,",
      "  UpdateDateColumn,",
      "  BeforeInsert",
      "} from 'typeorm'",
      "",
      "@Entity('${TM_FILENAME_BASE/(.*)/${1:/downcase}/}s')",
      "export default class $TM_FILENAME_BASE {",
      "  @PrimaryColumn('uuid')",
      "  ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}_id: string;",
      "",
      "  @Column()",
      "  name: string;",
      "",
      "  @CreateDateColumn()",
      "  created_at: Date;",
      "",
      "  @UpdateDateColumn()",
      "  updated_at: Date;",
      "",
      "  @DeleteDateColumn()",
      "  deleted_at: Date;",
      "",
      "  @BeforeInsert()",
      "  ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}Props (): void {",
      "    this.${TM_FILENAME_BASE/(.*)/${1:/downcase}/}_id = uuid()",
      "  }",
      "}",
      "",
      ]
    },
  
    "Many to One Relation": {
      "prefix": "manyToOneTemplate",
      "body": [
        "@ManyToOne(() => ${1:ONE_ENTITY}, ${2:nickname} => ${2:nickname}.${TM_FILENAME_BASE/(.*)/${1:/downcase}/})",
        "@JoinColumn({ name: '${3:Primary_Column_ONE_ENTITY}_id' })",
        "${2:nickname}: ${1:ONE_ENTITY}",
        "",
        "@Column('uuid')",
        "${3:Primary_Column_ONE_ENTITY}_id: string;",
        "",
      ]
    },
  
    "One to Many Relation": {
      "prefix": "oneToManyTemplate",
      "body": [
        "@OneToMany(() => ${1:MANY_ENTITY}, ${2:nickname} => ${2:nickname}.${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, {})",
        "${2:nickname}: ${1:MANY_ENTITY}[]",
        "",
      ]
    },
  
    "Interface Template": {
      "prefix": "interfaceTemplate",
      "body": [
        "// import ENTITY from '@modules/'",
        "",
        "export interface CreateProps {",
        "  ${1:PROP}: ${2:TYPE}",
        "}",
        "",
        "export default interface $TM_FILENAME_BASE {",
        "  create(data: CreateProps): Promise<ENTITY>",
        "}",
        "",
      ]
    },
  
  
    "Fake Repository Template": {
      "prefix": "fakeRepositoryTemplate",
      "body": [
        "import { v4 as uuid } from 'uuid'",
        "",
        "import ENTITY from '@modules/${1:module}'",
        "import INTERFACE_REPOSITORY , { CreateProps } from '../interfaces/'",
        "",
        "export default class $TM_FILENAME_BASE implements INTERFACE_REPOSITORY {",
        "  private repository: ENTITY[] = []",
        "",
        "  async create ({ props }:CreateProps): Promise<ENTITY> {",
        "    const entity_data = new ENTITY()",
        "",
        "    Object.assign(entity_data, {",
        "       OBJECT_ID: uuid(),",
        "       props,",
        "       created_at: new Date(),",
        "       updated_at: new Date()",
        "     })",
        "",
        "    this.repository.push(entity_data)",
        "",
        "    return entity_data",
        "  }",
        "}",
        "",
      ]
    },
  
    "Repository Template": {
      "prefix": "repositoryTemplate",
      "body": [
        "import { Repository, getRepository } from 'typeorm'",
        "",
        "import ENTITY from '../entities/${1:ENTITY}'",
        "import INTERFACE_REPOSITORY from '@modules/${2:INTERFACE_REPOSITORY}'",
        "",
        "export default class $TM_FILENAME_BASE implements INTERFACE_REPOSITORY {",
        "  private repository: Repository<ENTITY>",
        "",
        "  constructor () {",
        "    this.repository = getRepository(ENTITY)",
        "  }",
        "",
        "  // Repositories Methods",
        "",
        "}",
      ]
    },
  
        
    "Index Container Template": {
      "prefix": "indexContainerTemplate",
      "body": [
        "import { container } from 'tsyringe'",
        "",
        "import INTERFACE from './interfaces/'",
        "import REPOSITORY from '@modules/'",
        "",
        "const providers = {",
        "  ${1:nameProvider}: REPOSITORY",
        "}",
        "",
        "container.registerSingleton<INTERFACE>(",
        "  'REPOSITORY',",
        "  providers.${1:nameProvider}",
        ")",
        "",
      ]
    },
    
    "Service Template": {
      "prefix": "serviceTemplate",
      "body": [
        "import { inject, injectable } from 'tsyringe'",
        "",
        "import AppError from '@shared/errors/AppError'",
        "",
        "import ENTITY from '@modules/${1:module}'",
        "import INTERFACE_REPOSITORY from '@modules/${2:module}'",
        "",
        "interface Request{",
        "  ${3:PROP}: ${4:TYPE}",
        "}",
        "",
        "@injectable()",
        "export default class $TM_FILENAME_BASE {",
        "",
        "  constructor (",
        "    @inject('INJECT_REPOSITORY')",
        "    private repository: INTERFACE_REPOSITORY",
        "  ) {}",
        "",
        "  async execute ({ props }: Request): Promise<void> {",
        "    // const repoFunctions = await this.repository.function({})",
        "    ",
        "  }",
        "}",
        "",
      ]
    },
  
    "Controller Template": {
      "prefix": "controllerTemplate",
      "body": [
        "import { Request, Response } from 'express'",
        "import { container } from 'tsyringe'",
        "import { classToClass } from 'class-transformer'",
        "",
        "import SERVICE_NAME from '@modules/'",
        "",
        "export default class $TM_FILENAME_BASE {",
        "  async ${1|show,index,create,update,delete|} (request: Request, response: Response): Promise<Response> {",
        "    const { props } = request.body",
        "",
        "    const service = container.resolve(SERVICE_NAME)",
        "",
        "    const serviceFunction = await service.execute({})",
        "",
        "    return response.json(classToClass(serviceFunction))",
        "  }",
        "}",
        "",
      ]
    },
  
    "Router Template": {
      "prefix": "routerTemplate",
      "body": [
        "import { Router } from 'express'",
        "",
        "import CONTROLLER_NAME from '../controllers/${2:CONTROLLER}'",
        "",
        "const router = Router()",
        "",
        "const controllerInstance = new CONTROLLER_NAME()",
        "",
        "router.${1|get,post,put,patch,delete|}('/', controllerInstance.function)",
        "",
        "export default router",
        ""
      ]
    },
  
    "Test Spec Template": {
      "prefix": "testTemplate",
      "body": [
        "import AppError from '@shared/errors/AppError'",
        "import Faker from 'faker'",
        "",
        "import FAKE_REPOSITORY from '@modules/'",
        "import SERVICE_NAME from './'",
        "",
        "let fakeRepository: FAKE_REPOSITORY",
        "let serviceName: SERVICE_NAME",
        "",
        "describe('${1:TEST_NAME}', () => {",
        "  beforeEach(() => {",
        "    fakeRepository = new FAKE_REPOSITORY()",
        "    serviceName = new SERVICE_NAME(fakeRepository)",
        "  })",
        "",
        "  it('should be able to ', async () => {",
        "",
        "",
        "  })",
        "",
        "})",
        "",
      ]
    },
  }
  